<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>//This model is an adaptation by Frits Vaandrager of
//a model made by Martijn Hendriks

// Count for the number of readers currently reading
int readCount = 0;

// Number of processes in system:
const int N = 7; 

// Number of semaphores:
const int M = 1;

// Names of the semaphores, ranging from 0 to M-1:
const int s = 0;

// The channels to synchronize with the semafores
// A call semWait(s) by process p translates to a sequence of two transitions labeled with
//      semWait(s)(p)!
//      semGo(s)(p)?
//A call semSignal(s) by process p translates to a transition labeled with
//     semSignal(s)(p)!
chan semWait[M][N], semGo[M][N], semSignal[M][N];
</declaration><template><name>Semaphore</name><parameter>const int id,  const int queue_size, const int init_val</parameter><declaration>//The value of the semaphore
int count = init_val;
//The queue of the semaphore
//value -1 denotes an empty array entry
int[-1,N-1] queue[queue_size];
//An auxiliary variable used to temporarily store process id
meta int[0,N-1] q;

void initialize ()
{
  for (i : int[0,queue_size-1])
      {queue[i] = -1;}
}

void deQueue ()
{
  for (i : int[1,queue_size-1])
    queue[i-1] = queue[i];
  queue[queue_size-1] = -1;
}

void enQueue (int p)
{
  int i = 0;
  while (queue[i]&gt;=0){i++;};
  queue[i]=p;
}

int[0,N-1] headQueue ( )
{
  return queue[0];
}

bool fullQueue ( )
{
  for (i : int[0,queue_size-1])
   {
     if (queue[i]==-1) {return false;}
   }
  return true;
}</declaration><location id="id0" x="384" y="64"><committed/></location><location id="id1" x="608" y="320"><committed/></location><location id="id2" x="352" y="96"><name x="288" y="64">overflow</name></location><location id="id3" x="480" y="192"></location><init ref="id0"/><transition><source ref="id0"/><target ref="id3"/><label kind="assignment" x="408" y="72">initialize()</label></transition><transition><source ref="id3"/><target ref="id3"/><label kind="select" x="272" y="192">p:int[0,N-1]</label><label kind="guard" x="272" y="208">count&gt;=0</label><label kind="synchronisation" x="272" y="224">semSignal[id][p]?</label><label kind="assignment" x="272" y="240">count++</label><nail x="352" y="192"/><nail x="352" y="224"/></transition><transition><source ref="id3"/><target ref="id1"/><label kind="select" x="552" y="104">p:int[0,N-1]</label><label kind="guard" x="552" y="120">count&gt;0</label><label kind="synchronisation" x="552" y="136">semWait[id][p]?</label><label kind="assignment" x="552" y="152">count--,
q=p</label><nail x="608" y="192"/></transition><transition><source ref="id3"/><target ref="id2"/><label kind="select" x="248" y="112">p:int[0,N-1]</label><label kind="guard" x="248" y="128">count&lt;=0 &amp;&amp; fullQueue()</label><label kind="synchronisation" x="248" y="144">semWait[id][p]?</label></transition><transition><source ref="id1"/><target ref="id3"/><label kind="synchronisation" x="512" y="208">semGo[id][q]!</label></transition><transition><source ref="id3"/><target ref="id1"/><label kind="select" x="360" y="280">p:int[0,N-1]</label><label kind="guard" x="360" y="296">count&lt;0</label><label kind="synchronisation" x="360" y="312">semSignal[id][p]?</label><label kind="assignment" x="360" y="328">count++,
q=headQueue(),
deQueue()</label><nail x="480" y="320"/></transition><transition><source ref="id3"/><target ref="id3"/><label kind="select" x="480" y="-24">p:int[0,N-1]</label><label kind="guard" x="480" y="-8">count&lt;=0 &amp;&amp; not fullQueue()</label><label kind="synchronisation" x="480" y="8">semWait[id][p]?</label><label kind="assignment" x="480" y="24">count--,
enQueue(p)</label><nail x="480" y="64"/><nail x="512" y="64"/></transition></template><template><name>Reader</name><parameter>const int pid</parameter><location id="id4" x="568" y="0"><name x="592" y="-8">READING</name></location><location id="id5" x="280" y="0"></location><location id="id6" x="-8" y="0"><name x="-80" y="-8">READY</name></location><init ref="id6"/><transition><source ref="id5"/><target ref="id4"/><label kind="synchronisation" x="336" y="8">semGo[s][pid]?</label><label kind="assignment" x="304" y="-24">readCount = readCount + 1</label></transition><transition><source ref="id4"/><target ref="id6"/><label kind="guard" x="208" y="152">readCount == 1</label><label kind="synchronisation" x="184" y="200">semSignal[s][pid]!</label><label kind="assignment" x="168" y="168">readCount = readCount - 1</label><nail x="568" y="192"/><nail x="-8" y="192"/></transition><transition><source ref="id4"/><target ref="id6"/><label kind="guard" x="224" y="64">readCount &gt; 1</label><label kind="assignment" x="184" y="80">readCount = readCount - 1</label><nail x="504" y="104"/><nail x="72" y="104"/></transition><transition><source ref="id6"/><target ref="id4"/><label kind="guard" x="184" y="-160">readCount &gt; 0</label><label kind="assignment" x="144" y="-144">readCount = readCount + 1</label><nail x="-8" y="-120"/><nail x="568" y="-120"/></transition><transition><source ref="id6"/><target ref="id5"/><label kind="guard" x="72" y="-24">readCount == 0</label><label kind="synchronisation" x="72" y="8">semWait[s][pid]!</label></transition></template><template><name>Writer</name><parameter>const int pid</parameter><location id="id7" x="408" y="0"><name x="384" y="-32">WRITING</name></location><location id="id8" x="200" y="0"></location><location id="id9" x="0" y="0"><name x="-24" y="-40">READY</name></location><init ref="id9"/><transition><source ref="id8"/><target ref="id7"/><label kind="synchronisation" x="248" y="8">semGo[s][pid]?</label></transition><transition><source ref="id7"/><target ref="id9"/><label kind="synchronisation" x="136" y="112">semSignal[s][pid]!</label><nail x="408" y="104"/><nail x="0" y="104"/></transition><transition><source ref="id9"/><target ref="id8"/><label kind="synchronisation" x="40" y="8">semWait[s][pid]!</label></transition></template><system>Writer1 = Writer(0);
Writer2 = Writer(6);
Reader1 = Reader(1);
Reader2 = Reader(2);
Reader3 = Reader(3);
Reader4 = Reader(4);
Reader5 = Reader(5);
Sem = Semaphore(s,N-1,1);
system
	Reader1,
	Reader2,
	Reader3,
	Reader4,
	Reader5,
	Writer1,
	Writer2,
	Sem;
</system></nta>